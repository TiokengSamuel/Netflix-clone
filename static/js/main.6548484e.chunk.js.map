{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","key","id","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaires","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.6548484e.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\",\n});\n\n\nexport default instance;","import React, { useState, useEffect } from 'react';\nimport axios from './axios';\nimport \"./Row.css\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({title, fetchUrl, isLargeRow}) {\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n\n    useEffect(() => {\n        async function fetchData(){\n            const request = await axios.get(fetchUrl);\n            setMovies(request.data.results);\n            return request;\n        }\n        fetchData();\n    }, [fetchUrl]);\n\n    const opts = {\n        height: \"390\",\n        width:  \"100%\",\n        playerVars: {\n        //https://developers.google.com/youtube/player_parameters\n        autoplay: 1,\n        },\n     };\n\n     const handleClick = (movie) => {\n        if (trailerUrl){\n            setTrailerUrl(\"\");\n        } else {\n            movieTrailer(movie?.name || \"\")\n            .then(url => {\n              const urlParams = new URLSearchParams(new URL(url).search);\n              setTrailerUrl(urlParams.get('v'));\n            })\n            .catch((error) => console.log(error));\n        }\n     }\n\n    return(\n        <div className=\"row\">\n           <h2>{title}</h2> \n\n            <div className=\"row__posters\">\n                {/*several row__posters */}\n                {movies.map(movie => (\n                <img\n                 key={movie.id}\n                 className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n                 onClick={() => handleClick(movie)}\n\n                 src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt={movie.name}/> \n                ))\n                }\n            \n            </div>\n        {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n        </div>\n    )\n}\n\nexport default Row;","const API_KEY = \"010cf02106be78cd97145ccefed2ec7d\";\n\nconst requests = {\n    fetchTrending: '/trending/all/week?api_key=' + API_KEY + '&language=en-US',\n    fetchNetflixOriginals: '/discover/tv?api_key=' + API_KEY + '&with_networks=213',\n    fetchTopRated: '/movie/top_rated?api_key=' + API_KEY + '&language=en-US',\n    fetchActionMovies: '/discover/movie?api_key=' + API_KEY + '&with_genres=28',\n    fetchComedyMovies: '/discover/movie?api_key=' + API_KEY + '&with_genres=35',\n    fetchHorrorMovies: '/discover/movie?api_key=' + API_KEY + '&with_genres=27',\n    fetchRomanceMovies: '/discover/movie?api_key=' + API_KEY + '&with_genres=10749',\n    fetchDocumentaires: '/discover/movie?api_key=' + API_KEY + '&with_genres=99',\n\n}\n\nexport default requests;","import React, { useState,useEffect } from 'react'\nimport axios from \"./axios\";\nimport requests from \"./requests\";\nimport \"./Banner.css\"\n\nfunction Banner() {\n    const [movie, setMovie] = useState([]);\n\n    useEffect(() => {\n        async function fetchData(){\n            const request = await axios.get(requests.fetchNetflixOriginals);\n            \n            setMovie(\n            request.data.results[\n                Math.floor(Math.random() * request.data.results.length - 1)\n            ]);\n            \n           return request;\n        }\n        fetchData();\n    }, []);\n\n    function truncate(str, n){\n        return str?.length > n ? str.substr(0, n-1) + \"...\" : str;\n    }\n\n\n    console.log(movie);\n\n    return (\n        <header className=\"banner\"\n          style={{\n              backgroundSize: \"cover\",\n              backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\n              backgroundPosition: \"center center\",\n          }}\n        >\n            <div className=\"banner__contents\">\n                <h1 className=\"banner__title\">\n                    {movie?.title || movie?.name || movie?.original_name}\n                </h1>\n                <div className=\"banner__buttons\">\n                    <button className=\"banner__button\">Play</button>\n                    <button className=\"banner__button\">My List</button>\n                </div>\n\n                <h1 className=\"banner__description\">\n                    {truncate(movie?.overview, 150)}\n                </h1>\n            </div>\n            <div className=\"banner__fadeBottom\"></div>\n        </header>\n    )\n}\n\nexport default Banner\n","import React, { useState, useEffect } from 'react'\nimport './Nav.css'\n\nfunction Nav() {\n    const [show, handleShow] = useState(false);\n\n    useEffect(() => {\n        window.addEventListener(\"scroll\", () => {\n            if (window.scrollY > 60){\n                handleShow(true);\n            } else handleShow(false);\n        });\n\n        return () => {\n            window.removeEventListener(\"scroll\");\n        }\n        \n    }, []);\n    return (\n        <div className={`nav ${show && \"nav__black\"}`}>\n            <img\n            className=\"nav__logo\"\n            src=\"https://pmcvariety.files.wordpress.com/2020/05/netflix-logo.png?w=600\"\n            alt=\"Netflix Logo\"\n            />\n\n\n            <img\n            className=\"nav__avatar\"\n            src=\"httpsmcvariety.files.wordpress.com/2020/05/netflix-logo.png?w=600\"\n            alt=\"\"\n            />\n\n            \n        </div>\n    )\n}\n\nexport default Nav;\n","import React from 'react';\nimport './App.css';\nimport Row from './Row';\nimport requests from './requests';\nimport Banner from './Banner';\nimport Nav from './Nav';\n\nfunction App() {\n\n  return (\n    <div className=\"app\">\n      <Nav/>\n      <Banner/>\n      <Row title=\"NETFLIX ORIGINALS\"\n       fetchUrl={requests.fetchNetflixOriginals}\n       isLargeRow\n       />\n\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending}/>\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated}/>\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies}/>\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies}/>\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies}/>\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies}/>\n      <Row title=\"Documentairies\" fetchUrl={requests.fetchDocumentaires}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}